name: Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string
        default: 'latest'
  repository_dispatch:
    types:
      - deployment

jobs:
  check-tests:
    name: Check if tests passed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Check test status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Check if tests have passed for this specific commit
            gh run list --workflow=test.yml --branch=master --status=success --limit=1 --commit=${{ github.sha }}
            if [ $? -ne 0 ]; then
              echo "Tests have not passed for commit ${{ github.sha }}. Deployment blocked."
              exit 1
            fi
          fi

      - name: Print last failed test run
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Last 5 test runs:"
          gh run list --workflow=test.yml --limit=5
          echo "Detailed logs of the last failed run:"
          LAST_FAILED_RUN=$(gh run list --workflow=test.yml --status=failure --limit=1 --json databaseId --jq '.[0].databaseId')
          if [ ! -z "$LAST_FAILED_RUN" ]; then
            gh run view $LAST_FAILED_RUN --log
          fi

  docker-push:
    name: Push Docker image to GHCR
    needs: check-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.event.inputs.version || steps.package-version.outputs.version }}
            type=raw,value=latest
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-nas:
    name: Deploy to NAS
    needs: [docker-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CI_DEPLOY_NAS_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host cinas-ext\n  HostName ${{ secrets.NAS_HOST }}\n  Port ${{ secrets.NAS_PORT }}\n  User ${{ secrets.NAS_USER }}\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy backend container
        run: |
          # Create necessary directories on NAS
          ssh cinas-ext 'mkdir -p ${{ secrets.NAS_BACKEND_PATH }}/{logs,prisma,scripts}'

          # Create network if it doesn't exist
          ssh cinas-ext 'docker network inspect billmate-network >/dev/null 2>&1 || docker network create billmate-network'

          # Copy docker-compose.yml to NAS
          scp docker-compose.yml cinas-ext:${{ secrets.NAS_BACKEND_PATH }}/

          # Update image in docker-compose.yml on NAS
          ssh cinas-ext 'sed -i "s|image: billmate-backend|image: ghcr.io/${{ github.repository }}:latest|" ${{ secrets.NAS_BACKEND_PATH }}/docker-compose.yml'

          # Remove port exposure in docker-compose.yml on NAS
          ssh cinas-ext 'sed -i "/ports:/,/3500/d" ${{ secrets.NAS_BACKEND_PATH }}/docker-compose.yml'

          # Create .env file from secrets
          ssh cinas-ext 'cat <<EOF > ${{ secrets.NAS_BACKEND_PATH }}/.env
          # Server Configuration
          PORT="3500"
          NODE_ENV="production"

          # Database Configuration
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          DIRECT_URL="${{ secrets.DIRECT_URL }}"

          # API Configuration
          API_PREFIX="/api"

          # JWT Configuration
          JWT_AUTH_EXPIRES_IN="15m"
          JWT_REFRESH_EXPIRES_IN="7d"
          JWT_CREATE_ACCOUNT_EXPIRES_IN="24h"
          JWT_RESET_PASSWORD_EXPIRES_IN="1h"
          JWT_SECRET_AUTH="${{ secrets.JWT_SECRET_AUTH }}"
          JWT_SECRET_REFRESH="${{ secrets.JWT_SECRET_REFRESH }}"
          JWT_SECRET_CONFIRM_ACCOUNT="${{ secrets.JWT_SECRET_CONFIRM_ACCOUNT }}"
          JWT_SECRET_RESET_PASSWORD="${{ secrets.JWT_SECRET_RESET_PASSWORD }}"

          # Log Configuration
          LOG_LEVEL="info"
          LOG_DIR="logs"
          EOF'

          # Deploy the container
          ssh cinas-ext 'cd ${{ secrets.NAS_BACKEND_PATH }} && docker compose pull && docker compose up -d'
